[{"path":"/articles/Prepare_data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Prepare data","text":"vignette show prepare DNA methylation dataset read memory shown Read data vignette. preparation necessary use methylation data together genetic data interaction analyses Haplin package.","code":"library(HaplinMethyl) #> Loading required package: Haplin  ex_path <- system.file(\"extdata\", package = \"HaplinMethyl\") ex_file <- \"env_data_test.dat\" ex_out_file <- \"dnam_ex\"  dnam_ex <- envDataRead(   file.in = ex_file,   dir.in = ex_path,   file.out = ex_out_file,   sep = \" \",   overwrite = TRUE ) #> Reading the data in chunks... #>  -- chunk 1-- #>  -- chunk 2-- #> ... done reading. #> Preparing data... #> ... done preparing #> Saving data... #> ... saved to file: ./dnam_ex_env.ffData"},{"path":"/articles/Prepare_data.html","id":"subsetting","dir":"Articles","previous_headings":"","what":"Subsetting","title":"Prepare data","text":"Let’s check dnam_ex object include: don’t want use entire data, can use envDataSubset function easily specify filters apply dataset. can subset using row names, row numbers, column names, column numbers. useful want , e.g., extract measurements one subgroup samples focus specific CpGs. Check Finding CpGs vignette use functions find CpGs within defined region! produces two new files: dnam_ex_3cpgs_env.ffData dnam_ex_3cpgs_env.RData, can used load data faster next R-session instance. returned object class original one, three chosen CpGs:","code":"dnam_ex #> This is continuous environmental data read in by 'envDataRead' #> with 400 columns #> and 200 rows. summary(dnam_ex) #> List of 5 #>  $ class   : chr [1:2] \"env.cont\" \"env.data\" #>  $ nrow    : int 200 #>  $ ncol    : int 400 #>  $ rownames: chr [1:200] \"id1\" \"id2\" \"id3\" \"id4\" ... #>  $ colnames: chr [1:400] \"cg1\" \"cg2\" \"cg3\" \"cg4\" ... dnam_ex_3cpgs <- envDataSubset(   env.data = dnam_ex,   col.names = c(\"cg5\", \"cg7\", \"cg10\"),   file.out = \"dnam_ex_3cpgs\",   overwrite = TRUE ) #> Will select 3 columns. #> opening ff /tmp/RtmpVechPi/ff/ff52eec5b90e4ba.ff #> Saving data...  #> ... saved to files: ./dnam_ex_3cpgs_env.ffData, ./dnam_ex_3cpgs_env.RData dnam_ex_3cpgs #> This is continuous environmental data read in by 'envDataRead' #> with 3 columns #> and 200 rows. summary(dnam_ex_3cpgs) #> List of 5 #>  $ class   : chr [1:2] \"env.cont\" \"env.data\" #>  $ nrow    : int 200 #>  $ ncol    : int 3 #>  $ rownames: chr [1:200] \"id1\" \"id2\" \"id3\" \"id4\" ... #>  $ colnames: chr [1:3] \"cg5\" \"cg7\" \"cg10\""},{"path":"/articles/Prepare_data.html","id":"categorizing","dir":"Articles","previous_headings":"","what":"Categorizing","title":"Prepare data","text":"measurements continuous (usually data arrays), need first categorize use Haplin. Thus, level DNA methylation single CpG CpG region dictate stratum membership sample.","code":"dnam_ex_3cpgs_cat <- envDataCategorize(   env.data = dnam_ex_3cpgs,   breaks = 3,   file.out = \"dnam_ex_3cpg_cat\",   overwrite = TRUE ) #> opening ff /tmp/RtmpVechPi/ff/ff52eec1dda0819.ff #> Creating categories: 1,2,3 #> Saving data... #> ... saved to file: ./dnam_ex_3cpg_cat_gen.ffData dnam_ex_3cpgs_cat #> This is categorical environmental data read in by 'envDataRead' #> with 1 columns #> and 200 rows. class(dnam_ex_3cpgs_cat) #> [1] \"env.cat\"  \"env.data\" showRaw(dnam_ex_3cpgs_cat) #> opening ff /tmp/RtmpVechPi/ff/ff52eeccd64809.ff #>     [,1] #> id1 2    #> id2 2    #> id3 3    #> id4 2    #> id5 1    #> attr(,\"vmode\") #> [1] byte #> Levels: 1 2 3"},{"path":"/articles/Read_data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Reading DNA methylation data","text":"vignette gives overview HaplinMethyl functions read DNA methylation data memory.","code":""},{"path":"/articles/Read_data.html","id":"read-data-from-a-file","dir":"Articles","previous_headings":"","what":"Read data from a file","title":"Reading DNA methylation data","text":"Let’s use exemplary data file: read directly file, use envDataRead function: Now, directory, new files: want use data future analyses, don’t delete files!","code":"library(HaplinMethyl) #> Loading required package: Haplin  ex_path <- system.file(\"extdata\", package = \"HaplinMethyl\") ex_file <- \"env_data_test.dat\" ex_out_file <- \"dnam_ex\" dnam_ex <- envDataRead(   file.in = ex_file,   dir.in = ex_path,   file.out = ex_out_file,   sep = \" \", # the exemplary file is a space-delimited file   header = TRUE, # make sure to check this!   rownames = TRUE, # make sure to check this!   overwrite = TRUE ) #> The output file(s) exist! #> Reading the data in chunks... #>  -- chunk 1-- #>  -- chunk 2-- #> ... done reading. #> Preparing data... #> ... done preparing #> Saving data... #> ... saved to file: ./dnam_ex_env.ffData dir(pattern = ex_out_file) #> [1] \"dnam_ex_3cpg_cat_gen.ffData\" \"dnam_ex_3cpg_cat_gen.RData\"  #> [3] \"dnam_ex_3cpgs_env.ffData\"    \"dnam_ex_3cpgs_env.RData\"     #> [5] \"dnam_ex_env.ffData\"          \"dnam_ex_env.RData\""},{"path":"/articles/Read_data.html","id":"read-data-from-a-matrix","dir":"Articles","previous_headings":"","what":"Read data from a matrix","title":"Reading DNA methylation data","text":"also possible create object matrix already memory.","code":"dnam_ex_from_matrix <- envDataReadFromObj(dnam_matrix)"},{"path":"/articles/Read_data.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"Reading DNA methylation data","text":"Reading exemplary dataset take long time data small. However, real-world data, might take even hour. Thus, don’t want every time start new analysis! close current R-session delete DNA methylation object, can easily re-load using envDataLoad function new files created envDataRead. NOTE: loading data .ffData file takes seconds instead tens minutes! :) mentioned functions give object class env.data either env.cont continuous measurements env.cat categorical data.","code":"dnam_ex <- envDataLoad(ex_out_file) class(dnam_ex) #> [1] \"env.cont\" \"env.data\""},{"path":"/articles/Read_data.html","id":"look-at-data","dir":"Articles","previous_headings":"","what":"Look at data","title":"Reading DNA methylation data","text":"DNA methylation data usually stored huge matrix CpGs columns samples rows, vice-versa. cell matrix stores \\(\\beta\\) value, tells us rate methylation CpG sample (number 0 1). might difficult print entire dataset, ’ve created help functions. want complete vector row names /column names, use short = FALSE argument summary function: can also get quickly number rows columns:","code":"dnam_ex #> This is continuous environmental data read in by 'envDataRead' #> with 400 columns #> and 200 rows. summary(dnam_ex) #> List of 5 #>  $ class   : chr [1:2] \"env.cont\" \"env.data\" #>  $ nrow    : int 200 #>  $ ncol    : int 400 #>  $ rownames: chr [1:200] \"id1\" \"id2\" \"id3\" \"id4\" ... #>  $ colnames: chr [1:400] \"cg1\" \"cg2\" \"cg3\" \"cg4\" ... summary(dnam_ex, short = FALSE) #> $class #> [1] \"env.cont\" \"env.data\" #>  #> $nrow #> [1] 200 #>  #> $ncol #> [1] 400 #>  #> $rownames #>   [1] \"id1\"   \"id2\"   \"id3\"   \"id4\"   \"id5\"   \"id6\"   \"id7\"   \"id8\"   \"id9\"   #>  [10] \"id10\"  \"id11\"  \"id12\"  \"id13\"  \"id14\"  \"id15\"  \"id16\"  \"id17\"  \"id18\"  #>  [19] \"id19\"  \"id20\"  \"id21\"  \"id22\"  \"id23\"  \"id24\"  \"id25\"  \"id26\"  \"id27\"  #>  [28] \"id28\"  \"id29\"  \"id30\"  \"id31\"  \"id32\"  \"id33\"  \"id34\"  \"id35\"  \"id36\"  #>  [37] \"id37\"  \"id38\"  \"id39\"  \"id40\"  \"id41\"  \"id42\"  \"id43\"  \"id44\"  \"id45\"  #>  [46] \"id46\"  \"id47\"  \"id48\"  \"id49\"  \"id50\"  \"id51\"  \"id52\"  \"id53\"  \"id54\"  #>  [55] \"id55\"  \"id56\"  \"id57\"  \"id58\"  \"id59\"  \"id60\"  \"id61\"  \"id62\"  \"id63\"  #>  [64] \"id64\"  \"id65\"  \"id66\"  \"id67\"  \"id68\"  \"id69\"  \"id70\"  \"id71\"  \"id72\"  #>  [73] \"id73\"  \"id74\"  \"id75\"  \"id76\"  \"id77\"  \"id78\"  \"id79\"  \"id80\"  \"id81\"  #>  [82] \"id82\"  \"id83\"  \"id84\"  \"id85\"  \"id86\"  \"id87\"  \"id88\"  \"id89\"  \"id90\"  #>  [91] \"id91\"  \"id92\"  \"id93\"  \"id94\"  \"id95\"  \"id96\"  \"id97\"  \"id98\"  \"id99\"  #> [100] \"id100\" \"id101\" \"id102\" \"id103\" \"id104\" \"id105\" \"id106\" \"id107\" \"id108\" #> [109] \"id109\" \"id110\" \"id111\" \"id112\" \"id113\" \"id114\" \"id115\" \"id116\" \"id117\" #> [118] \"id118\" \"id119\" \"id120\" \"id121\" \"id122\" \"id123\" \"id124\" \"id125\" \"id126\" #> [127] \"id127\" \"id128\" \"id129\" \"id130\" \"id131\" \"id132\" \"id133\" \"id134\" \"id135\" #> [136] \"id136\" \"id137\" \"id138\" \"id139\" \"id140\" \"id141\" \"id142\" \"id143\" \"id144\" #> [145] \"id145\" \"id146\" \"id147\" \"id148\" \"id149\" \"id150\" \"id151\" \"id152\" \"id153\" #> [154] \"id154\" \"id155\" \"id156\" \"id157\" \"id158\" \"id159\" \"id160\" \"id161\" \"id162\" #> [163] \"id163\" \"id164\" \"id165\" \"id166\" \"id167\" \"id168\" \"id169\" \"id170\" \"id171\" #> [172] \"id172\" \"id173\" \"id174\" \"id175\" \"id176\" \"id177\" \"id178\" \"id179\" \"id180\" #> [181] \"id181\" \"id182\" \"id183\" \"id184\" \"id185\" \"id186\" \"id187\" \"id188\" \"id189\" #> [190] \"id190\" \"id191\" \"id192\" \"id193\" \"id194\" \"id195\" \"id196\" \"id197\" \"id198\" #> [199] \"id199\" \"id200\" #>  #> $colnames #>   [1] \"cg1\"   \"cg2\"   \"cg3\"   \"cg4\"   \"cg5\"   \"cg6\"   \"cg7\"   \"cg8\"   \"cg9\"   #>  [10] \"cg10\"  \"cg11\"  \"cg12\"  \"cg13\"  \"cg14\"  \"cg15\"  \"cg16\"  \"cg17\"  \"cg18\"  #>  [19] \"cg19\"  \"cg20\"  \"cg21\"  \"cg22\"  \"cg23\"  \"cg24\"  \"cg25\"  \"cg26\"  \"cg27\"  #>  [28] \"cg28\"  \"cg29\"  \"cg30\"  \"cg31\"  \"cg32\"  \"cg33\"  \"cg34\"  \"cg35\"  \"cg36\"  #>  [37] \"cg37\"  \"cg38\"  \"cg39\"  \"cg40\"  \"cg41\"  \"cg42\"  \"cg43\"  \"cg44\"  \"cg45\"  #>  [46] \"cg46\"  \"cg47\"  \"cg48\"  \"cg49\"  \"cg50\"  \"cg51\"  \"cg52\"  \"cg53\"  \"cg54\"  #>  [55] \"cg55\"  \"cg56\"  \"cg57\"  \"cg58\"  \"cg59\"  \"cg60\"  \"cg61\"  \"cg62\"  \"cg63\"  #>  [64] \"cg64\"  \"cg65\"  \"cg66\"  \"cg67\"  \"cg68\"  \"cg69\"  \"cg70\"  \"cg71\"  \"cg72\"  #>  [73] \"cg73\"  \"cg74\"  \"cg75\"  \"cg76\"  \"cg77\"  \"cg78\"  \"cg79\"  \"cg80\"  \"cg81\"  #>  [82] \"cg82\"  \"cg83\"  \"cg84\"  \"cg85\"  \"cg86\"  \"cg87\"  \"cg88\"  \"cg89\"  \"cg90\"  #>  [91] \"cg91\"  \"cg92\"  \"cg93\"  \"cg94\"  \"cg95\"  \"cg96\"  \"cg97\"  \"cg98\"  \"cg99\"  #> [100] \"cg100\" \"cg101\" \"cg102\" \"cg103\" \"cg104\" \"cg105\" \"cg106\" \"cg107\" \"cg108\" #> [109] \"cg109\" \"cg110\" \"cg111\" \"cg112\" \"cg113\" \"cg114\" \"cg115\" \"cg116\" \"cg117\" #> [118] \"cg118\" \"cg119\" \"cg120\" \"cg121\" \"cg122\" \"cg123\" \"cg124\" \"cg125\" \"cg126\" #> [127] \"cg127\" \"cg128\" \"cg129\" \"cg130\" \"cg131\" \"cg132\" \"cg133\" \"cg134\" \"cg135\" #> [136] \"cg136\" \"cg137\" \"cg138\" \"cg139\" \"cg140\" \"cg141\" \"cg142\" \"cg143\" \"cg144\" #> [145] \"cg145\" \"cg146\" \"cg147\" \"cg148\" \"cg149\" \"cg150\" \"cg151\" \"cg152\" \"cg153\" #> [154] \"cg154\" \"cg155\" \"cg156\" \"cg157\" \"cg158\" \"cg159\" \"cg160\" \"cg161\" \"cg162\" #> [163] \"cg163\" \"cg164\" \"cg165\" \"cg166\" \"cg167\" \"cg168\" \"cg169\" \"cg170\" \"cg171\" #> [172] \"cg172\" \"cg173\" \"cg174\" \"cg175\" \"cg176\" \"cg177\" \"cg178\" \"cg179\" \"cg180\" #> [181] \"cg181\" \"cg182\" \"cg183\" \"cg184\" \"cg185\" \"cg186\" \"cg187\" \"cg188\" \"cg189\" #> [190] \"cg190\" \"cg191\" \"cg192\" \"cg193\" \"cg194\" \"cg195\" \"cg196\" \"cg197\" \"cg198\" #> [199] \"cg199\" \"cg200\" \"cg201\" \"cg202\" \"cg203\" \"cg204\" \"cg205\" \"cg206\" \"cg207\" #> [208] \"cg208\" \"cg209\" \"cg210\" \"cg211\" \"cg212\" \"cg213\" \"cg214\" \"cg215\" \"cg216\" #> [217] \"cg217\" \"cg218\" \"cg219\" \"cg220\" \"cg221\" \"cg222\" \"cg223\" \"cg224\" \"cg225\" #> [226] \"cg226\" \"cg227\" \"cg228\" \"cg229\" \"cg230\" \"cg231\" \"cg232\" \"cg233\" \"cg234\" #> [235] \"cg235\" \"cg236\" \"cg237\" \"cg238\" \"cg239\" \"cg240\" \"cg241\" \"cg242\" \"cg243\" #> [244] \"cg244\" \"cg245\" \"cg246\" \"cg247\" \"cg248\" \"cg249\" \"cg250\" \"cg251\" \"cg252\" #> [253] \"cg253\" \"cg254\" \"cg255\" \"cg256\" \"cg257\" \"cg258\" \"cg259\" \"cg260\" \"cg261\" #> [262] \"cg262\" \"cg263\" \"cg264\" \"cg265\" \"cg266\" \"cg267\" \"cg268\" \"cg269\" \"cg270\" #> [271] \"cg271\" \"cg272\" \"cg273\" \"cg274\" \"cg275\" \"cg276\" \"cg277\" \"cg278\" \"cg279\" #> [280] \"cg280\" \"cg281\" \"cg282\" \"cg283\" \"cg284\" \"cg285\" \"cg286\" \"cg287\" \"cg288\" #> [289] \"cg289\" \"cg290\" \"cg291\" \"cg292\" \"cg293\" \"cg294\" \"cg295\" \"cg296\" \"cg297\" #> [298] \"cg298\" \"cg299\" \"cg300\" \"cg301\" \"cg302\" \"cg303\" \"cg304\" \"cg305\" \"cg306\" #> [307] \"cg307\" \"cg308\" \"cg309\" \"cg310\" \"cg311\" \"cg312\" \"cg313\" \"cg314\" \"cg315\" #> [316] \"cg316\" \"cg317\" \"cg318\" \"cg319\" \"cg320\" \"cg321\" \"cg322\" \"cg323\" \"cg324\" #> [325] \"cg325\" \"cg326\" \"cg327\" \"cg328\" \"cg329\" \"cg330\" \"cg331\" \"cg332\" \"cg333\" #> [334] \"cg334\" \"cg335\" \"cg336\" \"cg337\" \"cg338\" \"cg339\" \"cg340\" \"cg341\" \"cg342\" #> [343] \"cg343\" \"cg344\" \"cg345\" \"cg346\" \"cg347\" \"cg348\" \"cg349\" \"cg350\" \"cg351\" #> [352] \"cg352\" \"cg353\" \"cg354\" \"cg355\" \"cg356\" \"cg357\" \"cg358\" \"cg359\" \"cg360\" #> [361] \"cg361\" \"cg362\" \"cg363\" \"cg364\" \"cg365\" \"cg366\" \"cg367\" \"cg368\" \"cg369\" #> [370] \"cg370\" \"cg371\" \"cg372\" \"cg373\" \"cg374\" \"cg375\" \"cg376\" \"cg377\" \"cg378\" #> [379] \"cg379\" \"cg380\" \"cg381\" \"cg382\" \"cg383\" \"cg384\" \"cg385\" \"cg386\" \"cg387\" #> [388] \"cg388\" \"cg389\" \"cg390\" \"cg391\" \"cg392\" \"cg393\" \"cg394\" \"cg395\" \"cg396\" #> [397] \"cg397\" \"cg398\" \"cg399\" \"cg400\" nrows(dnam_ex) #> [1] 200 ncolumns(dnam_ex) #> [1] 400"},{"path":"/articles/Run_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Run analysis","text":"vignette show run interaction analyses using Haplin package.","code":""},{"path":"/articles/Run_analysis.html","id":"reading-data","dir":"Articles","previous_headings":"","what":"Reading data","title":"Run analysis","text":"First, need read two datasets: DNA methylation genotype. ’ll use simulated data . Let’s take look genotype example coded 1 2 instead specific base letter (e.g., T, C) one marker. order columns follows: maternal allele 1 (A1), maternal A2, paternal A1, paternal A2, child’s A1, child’s A2.","code":"library(HaplinMethyl) #> Loading required package: Haplin  ex_path <- system.file(\"extdata\", package = \"HaplinMethyl\") ex_file <- \"env_data_test.dat\" ex_out_file <- \"dnam_ex\"  dnam_ex <- envDataRead(   file.in = ex_file,   dir.in = ex_path,   file.out = ex_out_file,   sep = \" \",   overwrite = TRUE ) #> The output file(s) exist! #> Reading the data in chunks... #>  -- chunk 1-- #>  -- chunk 2-- #> ... done reading. #> Preparing data... #> ... done preparing #> Saving data... #> ... saved to file: ./dnam_ex_env.ffData  ex_gen_file <- \"sim1\" gen_ex <- genDataLoad(   filename = ex_gen_file,   dir.in = ex_path ) dnam_ex #> This is continuous environmental data read in by 'envDataRead' #> with 400 columns #> and 200 rows. showRaw(dnam_ex) #> opening ff /tmp/RtmpHoavNS/ff/ff52f9d3308edaf.ff #>           cg1        cg2        cg3       cg4       cg5 #> id1 0.2045598 0.38376996 0.76001042 0.8731273 0.7625753 #> id2 0.2593365 0.41689855 0.94649631 0.9673046 0.4619886 #> id3 0.9912362 0.91398561 0.07621296 0.3841574 0.7026818 #> id4 0.4740415 0.04124038 0.56624919 0.4589275 0.4461102 #> id5 0.7989879 0.52987689 0.66167605 0.1056240 0.3917910 #> attr(,\"Csingle\") #> [1] TRUE  gen_ex #> This is raw genetic data read in through genDataRead. #>  #> It contains the following parts: #>    cov.data, gen.data, aux  #>  #> with following dimensions: #>   - covariate variables =  cov.1  #>       (total  1  covariate variables), #>   - number of markers =  1 , #>   - number of data lines =  200 showGen(gen_ex) #> Warning in showGen(gen_ex): It appears that your data has less markers (1) than #> requested (5), adjusting accordingly. #> opening ff /tmp/RtmpHoavNS/ff/tmp/RtmpekQIls/ff/ff164011e6d830.ff #> ff (open) byte length=30 (30) dim=c(5,6) dimorder=c(1,2) levels: 1 2 #>      l_m1_a_m l_m1_b_m l_m1_a_f l_m1_b_f l_m1_a_c l_m1_b_c #> [1,]        1        1        2        1        1        1 #> [2,]        1        1        2        2        2        1 #> [3,]        1        2        1        1        1        2 #> [4,]        1        1        2        2        2        1 #> [5,]        1        2        2        2        2        1"},{"path":"/articles/Run_analysis.html","id":"creating-the-strata","dir":"Articles","previous_headings":"","what":"Creating the strata","title":"Run analysis","text":"Let’s assume know first three methylation sites near marker genotype dataset. Thus, need extract methylation sites first. Next, let’s create one variable gives division samples strata based summarized methylation level three chosen methylation sites.","code":"dnam_ex_subset <- envDataSubset(   env.data = dnam_ex,   col.ids = 1:3,   file.out = \"dnam_subset\" ) #> Will select 3 columns. #> Saving data...  #> ... saved to files: ./dnam_subset_env.ffData, ./dnam_subset_env.RData dnam_ex_subset #> This is continuous environmental data read in by 'envDataRead' #> with 3 columns #> and 200 rows. dnam_ex_cat <- envDataCategorize(   env.data = dnam_ex_subset,   breaks = 3,   file.out = \"dnam_cat\" ) #> opening ff /tmp/RtmpHoavNS/ff/ff52f9d356db393.ff #> Creating categories: 1,2,3 #> Saving data... #> ... saved to file: ./dnam_cat_gen.ffData dnam_ex_cat #> This is categorical environmental data read in by 'envDataRead' #> with 1 columns #> and 200 rows. showRaw(dnam_ex_cat) #> opening ff /tmp/RtmpHoavNS/ff/ff52f9d6918ae3d.ff #>     [,1] #> id1 2    #> id2 2    #> id3 3    #> id4 1    #> id5 3    #> attr(,\"vmode\") #> [1] byte #> Levels: 1 2 3"},{"path":"/articles/Run_analysis.html","id":"adding-the-strata-variable","dir":"Articles","previous_headings":"","what":"Adding the strata variable","title":"Run analysis","text":"Now, strata variable needs added genotype dataset. NB: careful check order samples stratified DNA methylation data genotype data!","code":"new_strata <- showRaw(dnam_ex_cat, rows = 1:nrows(dnam_ex_cat)) gen_ex_strat <- addCovar(   data.in = gen_ex,   covar = new_strata,   c.name = \"dnam_c\" ) gen_ex_strat #> This is raw genetic data read in through genDataRead. #>  #> It contains the following parts: #>    cov.data, gen.data, aux  #>  #> with following dimensions: #>   - covariate variables =  cov.1, dnam_c  #>       (total  2  covariate variables), #>   - number of markers =  1 , #>   - number of data lines =  200 showPheno(gen_ex_strat) #>     cov.1 dnam_c #> id1 \"1\"   \"2\"    #> id2 \"1\"   \"2\"    #> id3 \"1\"   \"3\"    #> id4 \"1\"   \"1\"    #> id5 \"1\"   \"3\""},{"path":"/articles/Run_analysis.html","id":"preparing-genotype-data","dir":"Articles","previous_headings":"","what":"Preparing genotype data","title":"Run analysis","text":"Haplin requires pre-processing genotype data analysis can made.","code":"gen_ex_strat_prep <- genDataPreprocess(   data.in = gen_ex_strat,   file.out = \"gen_strat_prep\" ) #> Reading the marker names... #> Warning: No map file given, map file empty or the number of map file rows not #> equal to the number of markers in data; will generate dummy marker names. #> ...done #> Recoding covariate data... #> ...done #> Recoding genetic data (no. of loci: 1)... #>    ...running on only one CPU core! This may take some time... #>    ...checking alleles per SNP... #>    ...done, all alleles: 1 2  #>    ...recoding SNPs... #>    ...done #> Saving data...  #> ... saved to files: ./gen_strat_prep_gen.ffData ,  ./gen_strat_prep_gen.RData gen_ex_strat_prep #>  #>      This is preprocessed data, ready for haplin analysis. #>  #>      It contains the following parts: #>    cov.data, gen.data, aux  #>  #>      with following dimensions: #>    - number of covariate variables =  2 ,  - number of markers =  1 ,  - number of individuals/families =  200"},{"path":[]},{"path":"/articles/Run_analysis.html","id":"gene-methylation-interactions","dir":"Articles","previous_headings":"Run the analysis","what":"Gene-methylation interactions","title":"Run analysis","text":"Finally, can run analysis using haplinStrat resulting object list results, estimates per stratum pooled sample.  check significance interaction, need use gxe function p-values show interaction significant.","code":"g_x_me_results <- haplinStrat(   data = gen_ex_strat_prep,   strata = 2 ) #>  #> ## Running haplinStrat ## #>  #> Selected stratification variable: dnam_c.c #> Frequency distribution of stratification variable: #>  1  2  3  #> 67 66 67  #>  #> Running Haplin on full data file... #> opening ff /tmp/RtmpHoavNS/ff/ff52f9d6e480ef5.ff #> Done #>  #> Running Haplin on stratum \"1\"...Done #>  #> Running Haplin on stratum \"2\"...Done #>  #> Running Haplin on stratum \"3\"...Done names(g_x_me_results) #> [1] \"all\" \"1\"   \"2\"   \"3\" g_x_me_results$all #> This is the result of a haplin run. #> Number of data lines used: 200 | Number of haplotypes used: 2 #> Please use the \"summary\", \"plot\", \"haptable\" or \"output\" functions to obtain #>  more details. haptable(g_x_me_results) #>   stratum row.str marker alleles  counts    HWE.pv Original After.rem.NA #> 1     all       1     m1     1/2 607/593 0.3708224      200          200 #> 2     all       2   <NA>    <NA>    <NA>        NA      200          200 #> 3       1       1     m1     1/2 178/224 0.4912064       67           67 #> 4       1       2   <NA>    <NA>    <NA>        NA       67           67 #> 5       2       1     m1     1/2 206/190 0.6861466       66           66 #> 6       2       2   <NA>    <NA>    <NA>        NA       66           66 #> 7       3       1     m1     1/2 223/179 0.1415450       67           67 #> 8       3       2   <NA>    <NA>    <NA>        NA       67           67 #>   After.rem.Mend.inc. After.rem.unused.haplos pv.overall haplos haplofreq #> 1                 200                     200  0.3249067      1 0.5177906 #> 2                 200                     200  0.3249067      2 0.4822094 #> 3                  67                      67  0.4425462      1 0.4919781 #> 4                  67                      67  0.4425462      2 0.5080219 #> 5                  66                      66  0.4570745      1 0.5309276 #> 6                  66                      66  0.4570745      2 0.4690724 #> 7                  67                      67  0.3942638      1 0.5306729 #> 8                  67                      67  0.3942638      2 0.4693271 #>   haplofreq.lower haplofreq.upper reference   RR.est.  RR.lower RR.upper #> 1       0.4687235       0.5660839       ref 1.0000000 1.0000000 1.000000 #> 2       0.4339161       0.5312765        -  0.8789336 0.5957902 1.300486 #> 3       0.4080047       0.5767633       ref 1.0000000 1.0000000 1.000000 #> 4       0.4232367       0.5919953        -  1.4932158 0.6929969 3.201399 #> 5       0.4456386       0.6133251       ref 1.0000000 1.0000000 1.000000 #> 6       0.3866749       0.5543614        -  0.7933176 0.4063251 1.553061 #> 7       0.4458306       0.6119415       ref 1.0000000 1.0000000 1.000000 #> 8       0.3880585       0.5541694        -  0.6609049 0.3473787 1.256858 #>   RR.p.value RRdd.est. RRdd.lower RRdd.upper RRdd.p.value #> 1         NA 1.0000000  1.0000000   1.000000           NA #> 2  0.5176644 1.1551660  0.6705660   1.980248    0.6004552 #> 3         NA 1.0000000  1.0000000   1.000000           NA #> 4  0.2970941 1.8696232  0.6871265   5.107933    0.2111747 #> 5         NA 1.0000000  1.0000000   1.000000           NA #> 6  0.4981511 1.1573301  0.4504226   2.912177    0.7623507 #> 7         NA 1.0000000  1.0000000   1.000000           NA #> 8  0.2071984 0.8026436  0.3118921   2.019629    0.6384801 plot(g_x_me_results) gxe(g_x_me_results) #>           gxe.test     chisq df      pval #> 1       haplo.freq 0.5026134  2 0.7777838 #> 2            child 2.9488102  4 0.5664281 #> 3 haplo.freq.trend 0.3731476  1 0.5412935 #> 4      child.trend 2.6559459  2 0.2650139"},{"path":"/articles/Run_analysis.html","id":"parent-of-origin-methylation-interactions","dir":"Articles","previous_headings":"Run the analysis","what":"Parent-of-origin-methylation interactions","title":"Run analysis","text":"Similarly, can also check interaction methylation level parent--origin effect genetic marker.","code":"poo_x_me_results <- haplinStrat(   data = gen_ex_strat_prep,   strata = 2,   poo = TRUE ) #> Warning: Can only (for the time being) use reference = \"ref.cat\" or #> \"population\" when poo == TRUE. Has been changed to \"ref.cat\". #>  #> ## Running haplinStrat ## #>  #> Selected stratification variable: dnam_c.c #> Frequency distribution of stratification variable: #>  1  2  3  #> 67 66 67  #>  #> Running Haplin on full data file...Done #>  #> Running Haplin on stratum \"1\"...Done #>  #> Running Haplin on stratum \"2\"...Done #>  #> Running Haplin on stratum \"3\"...Done haptable(poo_x_me_results) #>   stratum row.str marker alleles  counts    HWE.pv Original After.rem.NA #> 1     all       1     m1     1/2 607/593 0.3708224      200          200 #> 2     all       2   <NA>    <NA>    <NA>        NA      200          200 #> 3       1       1     m1     1/2 178/224 0.4912064       67           67 #> 4       1       2   <NA>    <NA>    <NA>        NA       67           67 #> 5       2       1     m1     1/2 206/190 0.6861466       66           66 #> 6       2       2   <NA>    <NA>    <NA>        NA       66           66 #> 7       3       1     m1     1/2 223/179 0.1415450       67           67 #> 8       3       2   <NA>    <NA>    <NA>        NA       67           67 #>   After.rem.Mend.inc. After.rem.unused.haplos pv.overall haplos haplofreq #> 1                 200                     200  0.4215675      1 0.5176705 #> 2                 200                     200  0.4215675      2 0.4823295 #> 3                  67                      67  0.6427490      1 0.4930795 #> 4                  67                      67  0.6427490      2 0.5069205 #> 5                  66                      66  0.6552084      1 0.5308702 #> 6                  66                      66  0.6552084      2 0.4691298 #> 7                  67                      67  0.4587525      1 0.5302072 #> 8                  67                      67  0.4587525      2 0.4697928 #>   haplofreq.lower haplofreq.upper reference RRcm.est. RRcm.lower RRcm.upper #> 1       0.4700483       0.5670651       ref 1.0000000  1.0000000   1.000000 #> 2       0.4329349       0.5299517        -  0.9551130  0.6125346   1.512641 #> 3       0.4078670       0.5757597       ref 1.0000000  1.0000000   1.000000 #> 4       0.4242403       0.5921330        -  1.5606351  0.6593474   3.661163 #> 5       0.4479463       0.6150836       ref 1.0000000  1.0000000   1.000000 #> 6       0.3849164       0.5520537        -  0.8267190  0.3738303   1.870074 #> 7       0.4480859       0.6138420       ref 1.0000000  1.0000000   1.000000 #> 8       0.3861580       0.5519141        -  0.7716568  0.3761164   1.625104 #>   RRcm.p.value RRcf.est. RRcf.lower RRcf.upper RRcf.p.value RRcm_RRcf.est. #> 1           NA 1.0000000  1.0000000   1.000000           NA       1.000000 #> 2    0.8578440 0.7964699  0.4988981   1.294462    0.3508241       1.202628 #> 3           NA 1.0000000  1.0000000   1.000000           NA       1.000000 #> 4    0.3100549 1.4407954  0.6019219   3.440700    0.4240687       1.080438 #> 5           NA 1.0000000  1.0000000   1.000000           NA       1.000000 #> 6    0.6510574 0.7508834  0.3337436   1.712289    0.5004946       1.100715 #> 7           NA 1.0000000  1.0000000   1.000000           NA       1.000000 #> 8    0.4954824 0.5381458  0.2415788   1.232018    0.1409641       1.432857 #>   RRcm_RRcf.lower RRcm_RRcf.upper RRcm_RRcf.p.value RRdd.est. RRdd.lower #> 1       1.0000000        1.000000                NA 1.0000000  1.0000000 #> 2       0.7367299        1.980414         0.4609985 1.1497242  0.6795373 #> 3       1.0000000        1.000000                NA 1.0000000  1.0000000 #> 4       0.4823310        2.468996         0.8399792 1.8820947  0.6829190 #> 5       1.0000000        1.000000                NA 1.0000000  1.0000000 #> 6       0.4520536        2.759066         0.8271603 1.1445511  0.4635546 #> 7       1.0000000        1.000000                NA 1.0000000  1.0000000 #> 8       0.6120656        3.383351         0.4057060 0.7890665  0.3166753 #>   RRdd.upper RRdd.p.value #> 1   1.000000           NA #> 2   2.012892    0.6007082 #> 3   1.000000           NA #> 4   4.944720    0.2225700 #> 5   1.000000           NA #> 6   2.997610    0.7579938 #> 7   1.000000           NA #> 8   2.051910    0.6357477 plot(poo_x_me_results) gxe(poo_x_me_results) #>           gxe.test     chisq df      pval #> 1       haplo.freq 0.5026134  2 0.7777838 #> 2              poo 0.2626489  2 0.8769332 #> 3 haplo.freq.trend 0.3731476  1 0.5412935 #> 4        poo.trend 0.2175134  1 0.6409412"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julia Romanowska. Author, maintainer. Haakon K. Gjessing. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Romanowska J, Gjessing H (2024). HaplinMethyl: Additional functions Haplin, using matrices environmental data (e.g., DNA methylation data). R package version 0.2, https://github.com/jromanowska/HaplinMethyl/.","code":"@Manual{,   title = {HaplinMethyl: Additional functions for Haplin, for using matrices of environmental data (e.g., DNA methylation data)},   author = {Julia Romanowska and Haakon K. Gjessing},   year = {2024},   note = {R package version 0.2},   url = {https://github.com/jromanowska/HaplinMethyl/}, }"},{"path":"/index.html","id":"haplinmethyl","dir":"","previous_headings":"","what":"Additional functions for Haplin, for using matrices of environmental data\n  (e.g., DNA methylation data)","title":"Additional functions for Haplin, for using matrices of environmental data\n  (e.g., DNA methylation data)","text":"Additional package extend data read Haplin. HaplinMethyl package provides three categories important functions: reading data, loading read-data, manipulating environmental data.","code":""},{"path":[]},{"path":"/index.html","id":"reading-the-environmental-data","dir":"","previous_headings":"For those who can’t wait to try things out…","what":"Reading the environmental data:","title":"Additional functions for Haplin, for using matrices of environmental data\n  (e.g., DNA methylation data)","text":"two functions (envDataRead envDataReadFromObj) read data create object env.data class, list ff-matrices. Simultaneously, two files written: .RData .ffData. connected used data-loading function. object created also summary print methods defined easier viewing.","code":""},{"path":"/index.html","id":"loading-the-read-in-data","dir":"","previous_headings":"For those who can’t wait to try things out…","what":"Loading the read-in data:","title":"Additional functions for Haplin, for using matrices of environmental data\n  (e.g., DNA methylation data)","text":"envDataLoad function loads data, super-fast, compared reading data .","code":""},{"path":"/index.html","id":"manipulating-the-data","dir":"","previous_headings":"For those who can’t wait to try things out…","what":"Manipulating the data:","title":"Additional functions for Haplin, for using matrices of environmental data\n  (e.g., DNA methylation data)","text":"user can extract subset data read functions, envDataSubset. create new .RData .ffData files. Moreover, two functions created specifically DNA methylation data: findCpGsnearSNP findCpGsRange can used create CpG lists near given SNP within certain coordinate range.","code":""},{"path":"/index.html","id":"read-more","dir":"","previous_headings":"","what":"Read more…","title":"Additional functions for Haplin, for using matrices of environmental data\n  (e.g., DNA methylation data)","text":"Checkout vignettes! {r} vignette(package = \"HaplinMethyl\")","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Additional functions for Haplin, for using matrices of environmental data\n  (e.g., DNA methylation data)","text":"don’t devtools installed, run {r} install.packages(\"devtools\") , ’re ready install newest HaplinMethyl via {r} devtools::install_github(\"jromanowska/HaplinMethyl\")","code":""},{"path":"/reference/HaplinMethyl.html","id":null,"dir":"Reference","previous_headings":"","what":"HaplinMethyl: Additional functions for Haplin, for using matrices of\n  environmental data (e.g., DNA methylation data) — HaplinMethyl","title":"HaplinMethyl: Additional functions for Haplin, for using matrices of\n  environmental data (e.g., DNA methylation data) — HaplinMethyl","text":"HaplinMethyl package provides three categories important functions: reading data, loading read-data, manipulating environmental data.","code":""},{"path":"/reference/HaplinMethyl.html","id":"reading-the-environmental-data","dir":"Reference","previous_headings":"","what":"Reading the environmental data","title":"HaplinMethyl: Additional functions for Haplin, for using matrices of\n  environmental data (e.g., DNA methylation data) — HaplinMethyl","text":"two functions (envDataRead envDataReadFromObj) read   data create object env.data class,   list ff-matrices. Simultaneously, two files written: .RData   .ffData. connected used data-loading   function. object created also summary print   methods defined easier viewing.","code":""},{"path":"/reference/HaplinMethyl.html","id":"loading-the-read-in-data","dir":"Reference","previous_headings":"","what":"Loading the read-in data","title":"HaplinMethyl: Additional functions for Haplin, for using matrices of\n  environmental data (e.g., DNA methylation data) — HaplinMethyl","text":"envDataLoad function loads data, super-fast, compared   reading data .","code":""},{"path":"/reference/HaplinMethyl.html","id":"manipulating-the-data","dir":"Reference","previous_headings":"","what":"Manipulating the data","title":"HaplinMethyl: Additional functions for Haplin, for using matrices of\n  environmental data (e.g., DNA methylation data) — HaplinMethyl","text":"user can extract subset data read  functions, envDataSubset. create new .RData  .ffData files. Moreover, two functions created  specifically DNA methylation data: findCpGsnearSNP  findCpGsRange can used create CpG lists near given  SNP within certain coordinate range.","code":""},{"path":"/reference/addCovar.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding a covariate variable — addCovar","title":"Adding a covariate variable — addCovar","text":"Easily add column cov.data part \"haplin.data\"   \"haplin.ready\" object","code":""},{"path":"/reference/addCovar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding a covariate variable — addCovar","text":"","code":"addCovar(   data.in = stop(\"Data.in must be given!\", call. = FALSE),   covar = stop(\"covar must be given!\", call. = FALSE),   c.name = stop(\"c.name must be given!\", call. = FALSE) )"},{"path":"/reference/addCovar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding a covariate variable — addCovar","text":"data.input data, \"haplin.data\" \"haplin.ready\" object. covar vector added. c.name name column added cov.data.","code":""},{"path":"/reference/addCovar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding a covariate variable — addCovar","text":"object class data.additional   covariates.","code":""},{"path":"/reference/addCovar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adding a covariate variable — addCovar","text":"Add character integer vector \"cov.data\" part \"haplin.data\"   \"haplin.ready\" object. useful e.g., preparing   stratification analysis (haplinStrat). Note   parameters required covar needs vector   length equal number rows data..","code":""},{"path":"/reference/envDataCategorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating categorical variables out of continuous data — envDataCategorize","title":"Creating categorical variables out of continuous data — envDataCategorize","text":"function prepares environmental data used   stratification calling haplinStrat.","code":""},{"path":"/reference/envDataCategorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating categorical variables out of continuous data — envDataCategorize","text":"","code":"envDataCategorize(   env.data = stop(\"You didn't provide the environmental data!\", call. = FALSE),   summary.method = \"sum\",   breaks,   file.out = \"env_data_cat\",   dir.out = \".\",   overwrite = NULL )"},{"path":"/reference/envDataCategorize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating categorical variables out of continuous data — envDataCategorize","text":"env.data environmental data, read envDataRead function. summary.method one probe (rows), method used summarize continuous data across columns create one number per row (sample), used categorize data. breaks Numerical vector indicating divide continuous values categories (see Details). file.core name files contain categorized data (character string); ready load next time envDataLoad function; default: \"env_data_cat\". dir.directory contain saved data; defaults current working directory. overwrite Whether overwrite output files: NULL (default), prompt user give answer; set TRUE, automatically overwrite existing files; set FALSE, stop output files exist.","code":""},{"path":"/reference/envDataCategorize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating categorical variables out of continuous data — envDataCategorize","text":"list ff matrices, now containing categorized data (factors).   function also creates two files: .RData .ffData.","code":""},{"path":"/reference/envDataCategorize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating categorical variables out of continuous data — envDataCategorize","text":"`env.data` given assumed set somehow linked   , e.g., data DNA methylation measurements various   CpGs, CpGs might one region around given SNP. `summary.method` argument takes value following list: `sum` - arithmetical sum values (default); `average` - average value; `NULL` - summary; **NOTE:** data contains one       column, sure check breaks give correct division       column! `breaks` one number, defines number categories   range values divided . categories equal size,   based appropriate quantiles calculated summarized values.","code":""},{"path":"/reference/envDataLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading the data previously read in and saved by ","title":"Loading the data previously read in and saved by ","text":"function loads data saved .ffData .RData files, prepares data subsequent analysis.","code":""},{"path":"/reference/envDataLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading the data previously read in and saved by ","text":"","code":"envDataLoad(filename = stop(\"'filename' must be given!\"), dir.in = \".\")"},{"path":"/reference/envDataLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loading the data previously read in and saved by ","text":"filename base filenames; .e. data saved \"my_data_env.ffData\" \"my_data_env.RData\", 'filename' \"my_data\". dir.path directory files saved (defaults current directory).","code":""},{"path":"/reference/envDataLoad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading the data previously read in and saved by ","text":"list ffdf objects environmental data numeric format.","code":""},{"path":"/reference/envDataRead.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading the environmental data from a file. — envDataRead","title":"Reading the environmental data from a file. — envDataRead","text":"function reads environmental data accompanies genetic  data read genDataRead.","code":""},{"path":"/reference/envDataRead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading the environmental data from a file. — envDataRead","text":"","code":"envDataRead(   file.in = stop(\"'file.in' must be given!\"),   dir.in = \".\",   file.out = NULL,   dir.out = \".\",   sep = \",\",   cont = TRUE,   header = TRUE,   rownames = TRUE,   overwrite = NULL )"},{"path":"/reference/envDataRead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading the environmental data from a file. — envDataRead","text":"file.name file environmental data. dir.path directory 'file.' resides. file.base name output files (see Details). dir.path directory output files saved. sep separator character separates values line file; \",\" default (csv file). cont Logical - values continuous (TRUE, default) categories (FALSE)? See Details. header Logical indicating whether first line file header; default TRUE. rownames Default (TRUE) indicates first column file includes names rows. character vector given , names used rownames; FALSE, rownames used. overwrite Logical: file given name exists, overwritten ? NULL, user prompt input.","code":""},{"path":"/reference/envDataRead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading the environmental data from a file. — envDataRead","text":"list ffdf objects environmental data numeric format.","code":""},{"path":"/reference/envDataRead.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading the environmental data from a file. — envDataRead","text":"environmental data methylation data can large information stored per-SNP basis. Thus, data large, function reads andcreates special ff object stores data without limiting memory available. can take time needs performed . Later , one can use envDataLoad function load appropriate data .ffData file saved disk, quick process.","code":""},{"path":"/reference/envDataRead.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Reading the environmental data from a file. — envDataRead","text":"'file.' given, default NULL output filenames   constructed based input filenames. '_env' suffix added   base name .ffData file written disk. file contains   information needed restore ffdf object calling   envDataLoad function later . 'cont' TRUE (default), output data list ff matrices   containing single-precision values. However, using data   stratification values, user needs create categories - can   done manually provided envDataCategorize function.","code":""},{"path":"/reference/envDataReadFromObj.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading the environmental data from an object. — envDataReadFromObj","title":"Reading the environmental data from an object. — envDataReadFromObj","text":"function reads environmental data accompanies genetic data read genDataRead.","code":""},{"path":"/reference/envDataReadFromObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading the environmental data from an object. — envDataReadFromObj","text":"","code":"envDataReadFromObj(   obj.in = stop(\"The object must be given!\", .call = FALSE),   file.out = NULL,   dir.out = \".\",   cont = TRUE,   overwrite = NULL )"},{"path":"/reference/envDataReadFromObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading the environmental data from an object. — envDataReadFromObj","text":"obj.object (matrix) environmental data. file.base name output files (see Details). dir.path directory output files saved. cont Logical - values continuous (TRUE, default) categories (FALSE)? See Details. overwrite Logical: file given name exists, overwritten ? NULL, user prompt input.","code":""},{"path":"/reference/envDataReadFromObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading the environmental data from an object. — envDataReadFromObj","text":"list ffdf objects environmental data numeric format.","code":""},{"path":"/reference/envDataReadFromObj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading the environmental data from an object. — envDataReadFromObj","text":"environmental data methylation data can large information stored per-SNP basis. Thus, data large, function reads creates special ff object stores data without limiting memory available. can take time needs performed . Later , one can use envDataLoad function load appropriate data .ffData file saved disk, quick process.","code":""},{"path":"/reference/envDataReadFromObj.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Reading the environmental data from an object. — envDataReadFromObj","text":"'file.' given, default NULL output filenames   constructed based input filenames. '_env' suffix added   base name .ffData file written disk. file contains   information needed restore ffdf object calling   envDataLoad function later . 'cont' TRUE (default), output data list ff matrices   containing single-precision values. However, using data   stratification values, user needs create categories - can   done manually provided envDataCategorize function.","code":""},{"path":"/reference/envDataSubset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting the environmental data — envDataSubset","title":"Subsetting the environmental data — envDataSubset","text":"Extract subset environmental data specifying rows /columns.","code":""},{"path":"/reference/envDataSubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting the environmental data — envDataSubset","text":"","code":"envDataSubset(   env.data = stop(\"You need to specify the data!\", call. = FALSE),   col.names,   row.names,   col.ids,   row.ids,   file.out = \"my_data_part\",   dir.out = \".\",   overwrite = NULL )"},{"path":"/reference/envDataSubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting the environmental data — envDataSubset","text":"env.data dataset (class env.data) extract data. col.names Character vector column names extract (optional). row.names Character vector row names extract (optional). col.ids Numeric vector column IDs (optional). row.ids Numeric vector row IDs (optional). file.base output filename (default: \"my_data_part\"). dir.path directory output files saved. overwrite Whether overwrite output files: NULL (default), prompt user give answer; set TRUE, automatically overwrite existing files; set FALSE, stop output files exist.","code":""},{"path":"/reference/envDataSubset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting the environmental data — envDataSubset","text":"matrix subset data.","code":""},{"path":"/reference/envDataSubset.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Subsetting the environmental data — envDataSubset","text":"parameter col.names used jointly col.ids,   similarly rows!","code":""},{"path":"/reference/findCpGsRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding CpGs within a given range — findCpGsRange","title":"Finding CpGs within a given range — findCpGsRange","text":"basic function searching CpGs within given coordinate range","code":""},{"path":"/reference/findCpGsRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding CpGs within a given range — findCpGsRange","text":"","code":"findCpGsRange(range, cpgs)"},{"path":"/reference/findCpGsRange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding CpGs within a given range — findCpGsRange","text":"range vector start end position range. cpgs table CpGs given chromosome, columns named: \"id\", \"coord\".","code":""},{"path":"/reference/findCpGsRange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding CpGs within a given range — findCpGsRange","text":"data.frame CpGs columns named: \"id\", \"coord\".","code":""},{"path":"/reference/findCpGsRange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finding CpGs within a given range — findCpGsRange","text":"Given position range chromosome number, along table positions   CpGs chromosome, function return data.frame   chosen CpGs.","code":""},{"path":"/reference/findCpGsnearSNP.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding CpGs near a SNP — findCpGsnearSNP","title":"Finding CpGs near a SNP — findCpGsnearSNP","text":"basic function searching CpGs vicinity given SNP.","code":""},{"path":"/reference/findCpGsnearSNP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding CpGs near a SNP — findCpGsnearSNP","text":"","code":"findCpGsnearSNP(   snp = stop(\"'snp' is required!\", call. = FALSE),   cpgs = stop(\"'cpgs' is required!\", call. = FALSE),   range = 5000,   verbose = FALSE )"},{"path":"/reference/findCpGsnearSNP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding CpGs near a SNP — findCpGsnearSNP","text":"snp named list SNP's name (\"marker\"), chromosome . (\"chr\") coordinate (\"coord\"). cpgs list data.frame containing CpGs chromosome SNP located. Must contain two elements/columns: one named \"id\"  (unique CpG locus cluster ID, cg#) one named \"coord\" (coordinate CpG  locus). range integer specifying desired maximum number base pairs given SNP CpGs. default 5000. search CpGs restricted interval (snp$coord - range, snp$coord + range). verbose Whether print information result available (default: FALSE).","code":""},{"path":"/reference/findCpGsnearSNP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding CpGs near a SNP — findCpGsnearSNP","text":"data.frame CpGs columns named: \"id\", \"coord\".","code":""},{"path":"/reference/findCpGsnearSNP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finding CpGs near a SNP — findCpGsnearSNP","text":"Given position chromosome number SNP, along positions CpGs chromosome, function return data.frame nearby CpGs (within given number base pairs). **Please note** ensure every CpG `cpgs` SNP  `snp` located chromosome.","code":""},{"path":"/reference/nrows.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of rows/columns of env.data — nrows","title":"Number of rows/columns of env.data — nrows","text":"nrows ncolumns return number rows columns present  obj.","code":""},{"path":"/reference/nrows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of rows/columns of env.data — nrows","text":"","code":"nrows(obj)  ncolumns(obj)"},{"path":"/reference/nrows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of rows/columns of env.data — nrows","text":"obj env.cont env.cat data, read envDataRead.","code":""},{"path":"/reference/nrows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of rows/columns of env.data — nrows","text":"integer","code":""},{"path":"/reference/print.env.cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Info about the env.cat class — print.env.cat","title":"Info about the env.cat class — print.env.cat","text":"Prints short summary categorical environmental data.","code":""},{"path":"/reference/print.env.cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info about the env.cat class — print.env.cat","text":"","code":"# S3 method for env.cat print(x, ...)"},{"path":"/reference/print.env.cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info about the env.cat class — print.env.cat","text":"x env.cat object read envDataRead. ... ignored","code":""},{"path":"/reference/print.env.cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info about the env.cat class — print.env.cat","text":"NULL","code":""},{"path":"/reference/print.env.cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Info about the env.cont class — print.env.cont","title":"Info about the env.cont class — print.env.cont","text":"Prints short summary continuous environmental data.","code":""},{"path":"/reference/print.env.cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info about the env.cont class — print.env.cont","text":"","code":"# S3 method for env.cont print(x, ...)"},{"path":"/reference/print.env.cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info about the env.cont class — print.env.cont","text":"x env.cont object read envDataRead. ... ignored","code":""},{"path":"/reference/print.env.cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info about the env.cont class — print.env.cont","text":"NULL","code":""},{"path":"/reference/showRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"Show raw environmental data — showRaw","title":"Show raw environmental data — showRaw","text":"Extracting raw measurements `env.data` object structure.","code":""},{"path":"/reference/showRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show raw environmental data — showRaw","text":"","code":"showRaw(   data = stop(\"You need to specify the data!\", call. = FALSE),   rows = 1:5,   columns = 1:5 )"},{"path":"/reference/showRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show raw environmental data — showRaw","text":"data Object class `env.data`. rows Vector containing either numbers rows row names show. default, 'rows' 'columns' argument given, function returns 5x5 matrix. columns Vector containing either numbers columns column names show.","code":""},{"path":"/reference/showRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show raw environmental data — showRaw","text":"Matrix (ff format) extracted data.","code":""},{"path":"/reference/summary.env.cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Info about the env.cat class — summary.env.cat","title":"Info about the env.cat class — summary.env.cat","text":"Prints short summary categorical environmental data.","code":""},{"path":"/reference/summary.env.cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info about the env.cat class — summary.env.cat","text":"","code":"# S3 method for env.cat summary(object, short = TRUE, ...)"},{"path":"/reference/summary.env.cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info about the env.cat class — summary.env.cat","text":"object env.cat object read envDataRead. short output truncated first elements? (default: TRUE) useful dataset large. ... ignored","code":""},{"path":"/reference/summary.env.cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info about the env.cat class — summary.env.cat","text":"list :  class - full class name; nrow - number rows; ncol - number columns; rownames - character vector row names; colnames - character vector column names.","code":""},{"path":"/reference/summary.env.cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Info about the env.cont class — summary.env.cont","title":"Info about the env.cont class — summary.env.cont","text":"Returns short summary continuous environmental data.","code":""},{"path":"/reference/summary.env.cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Info about the env.cont class — summary.env.cont","text":"","code":"# S3 method for env.cont summary(object, short = TRUE, ...)"},{"path":"/reference/summary.env.cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Info about the env.cont class — summary.env.cont","text":"object env.cont object read envDataRead. short output truncated first elements? (default: TRUE) useful dataset large. ... ignored","code":""},{"path":"/reference/summary.env.cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Info about the env.cont class — summary.env.cont","text":"list :  class - full class name; nrow - number rows; ncol - number columns; rownames - character vector row names; colnames - character vector column names.","code":""}]
